#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xbram.h"
#include "sleep.h"

#define MYMEM_u(A) ((volatile u32*)ConfigPtr->MemBaseAddress)[A]
//#define MAXMEM	   ((ConfigPtr->MemHighAddress-ConfigPtr->MemBaseAddress)+1)/sizeof(u32)

XBram Bram;
XBram_Config *ConfigPtr;
int initBRAM();

#define MAX_ADDR 100 // Define a maximum size for the list

int main()
{
    init_platform();
    initBRAM();

    xil_printf("BRAM initialization complete.\r\n");

    int addr_value = 1;
    char memory_list[MAX_ADDR]; // Array to store memory values
    int index = 0;
    char curr_value;

    while(1)
    {
        curr_value = MYMEM_u(addr_value); // Get the current memory value

        xil_printf("Memory value %c for address %d.\r\n", curr_value, addr_value);

        // Save the current value to the memory list
        if (index < MAX_ADDR)
        {
            memory_list[index++] = curr_value;
        }
        else
        {
            xil_printf("Memory list full, cannot save more values.\r\n");
            break;
        }

        // Check if the current value is the 'Enter' key (ASCII value 13)
        if (curr_value == '\r')
        {
            xil_printf("Enter key detected! Printing the entire list:\r\n");

            // Print the saved list
            for (int i = 0; i < index; i++)
            {
                xil_printf("%c ", memory_list[i]);
            }
            xil_printf("\r\n");

            // Reset index to start saving from the beginning again, if needed
            index = 0;
        }

        addr_value++; // Increment the address to read the next value
        sleep(1);
    }

    cleanup_platform();
    return 0;
}

/*
 * This function initializes the BRAM driver. If an error occurs then exit
 */

int initBRAM()
{

	//BRAM initialization
	xil_printf("Initializing block RAM...\n\r");
	int Status;

	ConfigPtr = XBram_LookupConfig(XPAR_BRAM_0_DEVICE_ID);
	if (ConfigPtr == (XBram_Config *) NULL) {
		return XST_FAILURE;
	}

	Status = XBram_CfgInitialize(&Bram, ConfigPtr,
			ConfigPtr->CtrlBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	xil_printf("Done.\r\n");
	return XST_SUCCESS;
}
